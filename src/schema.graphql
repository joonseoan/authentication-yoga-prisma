type Query {
    users(query: String): [User!]!
    posts(query: String): [Post!]!
    comments: [Comment!]!
    me: User!
    post: Post!
}

type Mutation {
    # 2) With token
    createUser(data: createUserInput!): AuthPayload!
    # 1)
    # without token
    # createUser(data: createUserInput!): User!

    # 2)
    # With token, we should decoded token.
    # No need to use id args
    deleteUser: User!

    # 1)
    # Without Token, we should use id
    # deleteUser(id: ID!): User!
    # With token, we do not need to use id arg 
    #   because we should get the id value from the token.
    updateUser(data: updateUserInput ): User!

   # Without Token
    # updateUserInput must not mandatory!!!
    # updateUser(id: ID!, data: updateUserInput ): User!
    createPost(data: createPostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: updatePostInput): Post!
    createComment(data: createCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID!, data: updateCommentInput): Comment!

    # challenge
    login(data: loginInput): AuthPayload!
}

type AuthPayload {
    token: String!
    user: User!
}

#  IMPORTANT!!!
#  Subscriptions resolvers are not a function, but "an object" with subscribe method, that returns AsyncIterable.
#  So "count" or any other key value must be placed
type Subscription {
    # count: Int!
    # Comment! as the value comes back
    # The way of arguments are identical with query and mutation.
    # postId: PostId is required to notify new comments to the specific post
    #       Remember that when we create a comment, we did not put postId
    #       because we put the post ID manually in the array in db file.
    # comment(postId: ID! ): Comment!
    comment(postId: ID!): CommentSubscriptionPayload!
    
    # Challenge!!!
    # 1)
    # post: Post!

    # 2) Real World
    # Do not need to make another resover for this
    #   becauee the first field, "mutation" is a scalar type return
    #   and the second field "data" is defined aready
    post: PostSubscriptionPayload!
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    posts: [Post!]!
    comments: [Comment!]!
}

type Post {
    id: ID!
    title: String!
    body: String!
    published: Boolean
    author: User!
    comments: [Comment!]!
}

type Comment {
    id: ID!
    text: String!
    author: User!
    post: Post!
}

input createUserInput {
    name: String!
    email: String!
    password: String!
}

# updateUserInput : it is update. Therefore, we can't add mandatory exclamantation!!!
input updateUserInput {
    name: String
    email: String
    password: String
}

input createPostInput {
    title: String!
    body: String!
    published: Boolean
    # Since JWT, We do not need to manually input author!
    # author: ID!
}

input updatePostInput {
    title: String
    body: String
    published: Boolean

    # Without token
    # author: ID!
}

input createCommentInput {
    text: String!
    post: ID!
    # Without token
    # author: ID!
}

input updateCommentInput {
    text: String
    # Without token
    # author: ID!
    post: ID!
}

input loginInput {
    email: String!
    password: String!
}

# ENUM : We can use the one of three String types
enum MutationType {
    CREATED
    UPDATED
    DELETED    
}

# Challenge
# 1) without prisma
# type CommentSubscriptionPayload {
#     # mutation: String!
#     mutation: MutationType!
#     data: Comment!
# }

#  2) with Prisma
# switching to prisma-based payload
#  use "node" key instead of "data" above
type CommentSubscriptionPayload {
    mutation: MutationType!
    # must setup nullable!!!!! for delete!! 
    # It ends up with null when delete
    node: Comment
    # We do not need to use "updateField" and "previousVlue"
    #   which are the fields of prisma based "CommentSubscriptionPayload"
    # updateField
    # previousVlue

}

# 1) Without prisma
# type PostSubscriptionPayload {
#     # mutatoin: Sting! => a mutation name
    
#     # 1)
#     # mutation: String!

#     # 2) Instead of String!
#     mutation: MutationType!
#     data: Post!
# }

# 2) With prisma
type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}